// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name GFPSDKAdRenderer
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Foundation
import GFPSDK
import NaverAdsServices
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @objc(GFPRendererShoppingNDAView) @objcMembers @_Concurrency.MainActor @preconcurrency public class GFPRendererShoppingNDAView : UIKit.UIView {
  @objc(extraKeyDiscount) @_Concurrency.MainActor @preconcurrency public static let extraKeyDiscount: Swift.String
  @objc(extraKeyLabelBadge) @_Concurrency.MainActor @preconcurrency public static let extraKeyLabelBadge: Swift.String
  @objc(extraKeyStar) @_Concurrency.MainActor @preconcurrency public static let extraKeyStar: Swift.String
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @objc deinit
}
extension GFPSDKAdRenderer.GFPRendererShoppingNDAView : GFPSDK.GFPNativeRendererViewProtocol {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func titleAssetView() -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func advertiseAssetView() -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func mediaContainerView() -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func adBadgeAssetView() -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency @objc public static func createView() -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func bind(with asset: (any GFPSDK.GFPNativeAssetProtocol)?)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func changeStyle(with isDarkMode: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func estimateHeight() -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func scaleRatio() -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func updateRenderingSetting(renderingSetting: GFPSDK.GFPNativeBaseRenderingSetting?)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(GFPGradientLabelView) @objcMembers @_Concurrency.MainActor @preconcurrency public class GFPGradientLabelView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func sizeToFit()
  @objc @_Concurrency.MainActor @preconcurrency public var text: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public func createGradientView(startPoint: CoreFoundation.CGPoint, endPoint: CoreFoundation.CGPoint, colors: [Any])
  @objc @_Concurrency.MainActor @preconcurrency public func updateGradientView(isHidden: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func updateViewSize(aSize: CoreFoundation.CGSize)
  @objc @_Concurrency.MainActor @preconcurrency public func updateTextColor(color: UIKit.UIColor)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(GFPRendererShoppingLabelView) @objcMembers @_Concurrency.MainActor @preconcurrency public class GFPRendererShoppingLabelView : UIKit.UIView {
  @objc(extraKeyAttentionBadge) @_Concurrency.MainActor @preconcurrency public static let extraKeyAttentionBadge: Swift.String
  @objc(extraKeyLabelText) @_Concurrency.MainActor @preconcurrency public static let extraKeyLabelText: Swift.String
  @objc(extraKeyLabelText2) @_Concurrency.MainActor @preconcurrency public static let extraKeyLabelText2: Swift.String
  @objc(extraKeyLabelImage) @_Concurrency.MainActor @preconcurrency public static let extraKeyLabelImage: Swift.String
  @objc(extraKeyLabelImage2) @_Concurrency.MainActor @preconcurrency public static let extraKeyLabelImage2: Swift.String
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension GFPSDKAdRenderer.GFPRendererShoppingLabelView : GFPSDK.GFPNativeRendererViewProtocol {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func advertiseAssetView() -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func mediaContainerView() -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func bodyAssetView() -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func ctaAssetView() -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func noticeAssetView() -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func adChoicesContainerView() -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func extraView(with key: Swift.String) -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency @objc public static func createView() -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func bind(with asset: (any GFPSDK.GFPNativeAssetProtocol)?)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func changeStyle(with isDarkMode: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func estimateHeight() -> CoreFoundation.CGFloat
}
@_inheritsConvenienceInitializers @objc(GFPRendererUtils) @objcMembers public class GFPRendererUtils : ObjectiveC.NSObject {
  @objc public static let sharedInstance: GFPSDKAdRenderer.GFPRendererUtils
  @objc public func loadNib(name: Swift.String) -> UIKit.UIView?
  @objc public func loadImage(name: Swift.String) -> UIKit.UIImage?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(GFPRendererSmartChannelFlickingView) @objcMembers @_Concurrency.MainActor @preconcurrency public class GFPRendererSmartChannelFlickingView : UIKit.UIView {
  @objc(smartChannelHeight) @_Concurrency.MainActor @preconcurrency public static let smartChannelHeight: Swift.Double
  @objc(smartChannelMaxWidth) @_Concurrency.MainActor @preconcurrency public static let smartChannelMaxWidth: Swift.Double
  @objc(smartChannelMaxHeight) @_Concurrency.MainActor @preconcurrency public static let smartChannelMaxHeight: Swift.Double
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @objc deinit
}
extension GFPSDKAdRenderer.GFPRendererSmartChannelFlickingView : GFPSDK.GFPNativeRendererViewProtocol {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func mediaContainerView() -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func adChoicesContainerView() -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency @objc public static func createView() -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func bind(with asset: (any GFPSDK.GFPNativeAssetProtocol)?)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func changeStyle(with isDarkMode: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func estimateHeight() -> CoreFoundation.CGFloat
}
