// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name GFPSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
@_exported import GFPSDK
import NaverAdsServices
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension GFPSDK.GFPErrorUtils {
  public static func loadError(message: Swift.String, errorKey: Swift.String, errorCode: GFPSDK.GFPErrorCode, loadEventStat: GFPSDK.GFPLoadEventStat) -> (NaverAdsServices.GFPError, GFPSDK.GFPLoadEvent)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class kGFPAdInterfaceStyle : ObjectiveC.NSObject {
  @objc public static let changed: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class kGFPVideoGlobalOptions : ObjectiveC.NSObject {
  @objc public static let disableAutoPlay_changed: Swift.String
  @objc public static let globalPlayPolicy_changed: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class kGFPRewardedNotification : ObjectiveC.NSObject {
  @objc public static let resume: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class GFPLabelOption : ObjectiveC.NSObject {
  @objc(defaultHighlightBgColor) public static let defaultHighlightBgColor: UIKit.UIColor?
  @objc final public let text: Swift.String?
  @objc final public let highlightBgColor: UIKit.UIColor?
  @objc(initWithText:highlightBgColor:) public init(text: Swift.String?, highlightBgColor: UIKit.UIColor?)
  @objc deinit
}
@objc public protocol GFPEventReportPresentable : ObjectiveC.NSObjectProtocol {
  @objc var adCallRequestTime: Foundation.NSNumber { get set }
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class GFPWaterfallAdSize : ObjectiveC.NSObject {
  @objc public var width: CoreFoundation.CGFloat
  @objc public var height: CoreFoundation.CGFloat
  @objc public var size: CoreFoundation.CGSize {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GFPInternalUtils : ObjectiveC.NSObject {
  @objc public class func adResponseSizeWith(dictionary: [Swift.AnyHashable : Any]) -> [GFPSDK.GFPWaterfallAdSize]
  @objc public class func adResponseSizeWith(string: Swift.String) -> [GFPSDK.GFPWaterfallAdSize]
  @objc public class func adResponseSizeWith(data: Foundation.Data) -> [GFPSDK.GFPWaterfallAdSize]
  @objc override dynamic public init()
  @objc deinit
}
@objc extension GFPSDK.GFPBannerView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func loadAdWith(dict preloadWaterfallResponse: [Swift.AnyHashable : Any])
  @objc @_Concurrency.MainActor(unsafe) dynamic public func loadAdWith(string preloadWaterfallResponse: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func loadAdWith(data preloadWaterfallResponse: Foundation.Data)
}
@objc(GFPAdInitProviderInfo) @objcMembers final public class GFPAdInitProviderInfo : ObjectiveC.NSObject, GFPSDK.GFPDictPresentable {
  @objc final public var type: Swift.String
  @objc final public var placeId: Swift.String
  @objc final public var testMode: Swift.Bool
  @objc final public var additionalInfo: GFPSDK.GFPAdInitProviderAdditionalInfo?
  @objc public init(withDictionary dict: Swift.Dictionary<Swift.String, Any>)
  @objc public init(withType type: Swift.String, testMode: Swift.Bool)
  @objc final public func dictionary() -> [Swift.String : Swift.String]?
  @objc public static func adProviders(_ dict: Swift.Dictionary<Swift.String, Any>) -> [GFPSDK.GFPAdInitProviderInfo]?
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public protocol GFPQueueObject : ObjectiveC.NSObjectProtocol {
}
@objc @objcMembers public class GFPLimitQueue : ObjectiveC.NSObject {
  @objc public var queue: [any GFPSDK.GFPQueueObject] {
    @objc get
  }
  @objc public var size: Swift.Int {
    get
  }
  @objc public var isFull: Swift.Bool {
    @objc get
  }
  @objc public var isEmpty: Swift.Bool {
    @objc get
  }
  @objc public func enqueue(_ queueObject: (any GFPSDK.GFPQueueObject)?)
  @objc public func enqueueAndReplace(_ queueObject: (any GFPSDK.GFPQueueObject)?)
  @objc public func dequeue() -> (any GFPSDK.GFPQueueObject)?
  @objc public class func sizeWith(_ size: Swift.Int) -> GFPSDK.GFPLimitQueue
  @objc public init(size: Swift.Int)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GFPVideoAdRenderingSetting : ObjectiveC.NSObject {
  @objc public static let GFPVideoAdRenderingSettingAutodetectBitrate: Swift.Int
  @objc public static let GFPVideoAdRenderingSettingDefaultStartTimeout: Swift.Double
  @objc public static let GFPVideoAdRenderingSettingDefaultBufferingTimeout: Swift.Double
  @objc public var bitrateKbps: Swift.Int
  @objc public var mimeTypes: [Swift.String]?
  @objc public var startTimeoutInterval: Foundation.TimeInterval
  @objc public var bufferingTimeoutInterval: Foundation.TimeInterval
  @objc public var isPreferContentWidthUI: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class GFPUADeviceInfo : ObjectiveC.NSObject {
  @objc public var systemVersion: Swift.String
  @objc public var deviceType: Swift.String
  @objc(initWith:deviceType:) public init(_ aSystemVersion: Swift.String, deviceType aDeviceType: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GFPServiceInfo : ObjectiveC.NSObject {
  @objc public var appName: Swift.String
  @objc public var appVersion: Swift.String
  @objc override dynamic public init()
  @objc public var dict: Swift.Dictionary<Swift.String, Swift.String> {
    @objc get
  }
  @objc public var appVersionDict: Swift.Dictionary<Swift.String, Swift.String> {
    @objc get
  }
  @objc deinit
}
@objc @objcMembers public class GFPDeviceInfo : ObjectiveC.NSObject {
  @objc public var uaInfo: GFPSDK.GFPUADeviceInfo
  @objc public var serviceInfo: GFPSDK.GFPServiceInfo
  @objc public init(_ version: Swift.String)
  @objc public var dict: Swift.Dictionary<Swift.String, Swift.String> {
    @objc get
  }
  @objc public var initializeDict: Swift.Dictionary<Swift.String, Swift.String> {
    @objc get
  }
  @objc deinit
}
@objc extension GFPSDK.GFPAdLoader {
  @objc dynamic public func loadAdWith(dict preloadWaterfallResponse: [Swift.AnyHashable : Any])
  @objc dynamic public func loadAdWith(string preloadWaterfallResponse: Swift.String)
  @objc dynamic public func loadAdWith(data preloadWaterfallResponse: Foundation.Data)
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class GFPAdProviderSetting : ObjectiveC.NSObject {
  @objc public var type: GFPSDK.GFPAdProviderSettingType {
    get
  }
  @objc public var isTestMode: Swift.Bool {
    @objc get
  }
  @objc public class func type(_ type: GFPSDK.GFPAdProviderSettingType, testMode: Swift.Bool) -> GFPSDK.GFPAdProviderSetting
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc extension GFPSDK.GFPVideoAdManager {
  @objc dynamic public func loadAdWith(dict preloadWaterfallResponse: [Swift.AnyHashable : Any])
  @objc dynamic public func loadAdWith(string preloadWaterfallResponse: Swift.String)
  @objc dynamic public func loadAdWith(data preloadWaterfallResponse: Foundation.Data)
}
@objc public enum GFPVideoBackgroundActionType : Swift.Int {
  case play
  case pause
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GFPVideoAdPlayerSetting : ObjectiveC.NSObject {
  @objc public var backAction: GFPSDK.GFPVideoBackgroundActionType
  @objc public var audioSetting: GFPSDK.GFPVideoAudioSettingType
  @objc final public let disableExternalPlayback: Swift.Bool
  @objc(initWithAction:audioSetting:disableExternalPlayback:) public init(action aAction: GFPSDK.GFPVideoBackgroundActionType, audioSetting aType: GFPSDK.GFPVideoAudioSettingType, disableExternalPlayBack: Swift.Bool)
  @objc convenience override dynamic public init()
  @objc(initWithAction:audioSetting:) convenience public init(action aAction: GFPSDK.GFPVideoBackgroundActionType, audioSetting aType: GFPSDK.GFPVideoAudioSettingType)
  @objc convenience public init(action aAction: GFPSDK.GFPVideoBackgroundActionType)
  @objc convenience public init(audioSetting aType: GFPSDK.GFPVideoAudioSettingType)
  @objc convenience public init(disableExternalPlayback: Swift.Bool)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public enum GFPOMContantsType : Swift.Int {
  case HTML
  case HTMLVideo
  case video
  case image
  case audio
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol GFPEventReportDelegate : ObjectiveC.NSObjectProtocol {
  @objc func reportTrackingAckImp(_ aURL: Swift.String)
  @objc func reportTrackingViewableImp(_ aURL: Swift.String)
  @objc func reportTrackingRenderedImp(_ aURL: Swift.String)
  @objc func reportTrackingAttachedImp(_ aURL: Swift.String)
  @objc func reportTrackingClickEvent(_ aURL: Swift.String)
  @objc func reportTrackingMuteEvent(_ aURL: Swift.String)
  @objc func reportTrackingLoadError(_ loadEventInfo: Swift.String)
  @objc func reportTrackingStartError(_ startEventInfo: Swift.String)
}
@objc @_inheritsConvenienceInitializers @objcMembers open class GFPTextAdViewAttribute : ObjectiveC.NSObject {
  @objc public var backgroundColor: UIKit.UIColor?
  @objc public var textColor: UIKit.UIColor?
  @objc public var verticalBarColor: UIKit.UIColor?
  @objc public var closeIcon: UIKit.UIImage?
  @objc public var moreIcon: UIKit.UIImage?
  @objc public var containerView: UIKit.UIView?
  @objc override dynamic public init()
  @objc(initWithContainer:) required public init(with container: UIKit.UIView?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GFPURLUtilsExtension : ObjectiveC.NSObject {
  @objc public class func sendGFPEventToUrl(_ urlString: Swift.String)
  @objc public class func openURLWith(_ aURL: Swift.String, completion: GFPSDK.GFPS2SAdLandingHandler?)
  @objc public class func defaultRequestWith(_ url: Foundation.URL) -> Foundation.URLRequest
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum GFPBannerProviderOption : Swift.Int {
  case none
  case NDA
  case DFP
  case inMobi
  case FAN
  case unity
  case appLovin
  case DT
  case IS
  case APS
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum GFPVideoProviderOption : Swift.Int {
  case none
  case NDA
  case IMA
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum GFPNativeProviderOption : Swift.Int {
  case none
  case NDA
  case DFP
  case FAN
  case inMobi
  case appLovin
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum GFPCombinedProviderOption : Swift.Int {
  case none
  case DFP
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum GFPRewardedAdProviderOption : Swift.Int {
  case none
  case DFP
  case FAN
  case inMobi
  case unity
  case appLovin
  case NDA
  case vungle
  case DT
  case IS
  case APS
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum GFPInterstitialAdProviderOption : Swift.Int {
  case none
  case DFP
  case FAN
  case inMobi
  case unity
  case appLovin
  case vungle
  case DT
  case IS
  case APS
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class GFPVideoAdParam : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc public var scheduleID: Swift.String {
    get
  }
  @objc public var requestID: Swift.String {
    get
  }
  @objc public var contentLength: Swift.Float {
    get
  }
  @objc public var remindRequest: Swift.Int {
    get
  }
  @objc public var startDelay: Swift.Int
  @objc public var hasRemind: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public init(scheduleID aScheduleID: Swift.String, requestID: Swift.String, contentLength: Swift.Float)
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@objc @objcMembers public class GFPUserAgent : ObjectiveC.NSObject {
  @objc public var useDefaultUA: Swift.Bool
  @objc public var updateUA: Swift.String?
  @objc public var wkwebViewUA: Swift.String {
    @objc get
  }
  @objc(initWith:) public init(deviceInfo: GFPSDK.GFPUADeviceInfo)
  @objc public init(externalUserAgent: Swift.String)
  @objc deinit
}
@objc @objcMembers public class GFPCustomAsset : ObjectiveC.NSObject {
  @objc final public let bundle: Foundation.Bundle?
  @objc final public let size: CoreFoundation.CGSize
  @objc final public let lightModeName: Swift.String
  @objc final public let darkModeName: Swift.String
  @objc(initWith:size:lightModeName:darkModeName:) public init(bundle: Foundation.Bundle?, size: CoreFoundation.CGSize, lightModeName: Swift.String, darkModeName: Swift.String)
  @objc(isExistResource) public var isExistResource: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GFPAdNativeOptions : ObjectiveC.NSObject {
  @objc public var renderingSetting: GFPSDK.GFPNativeAdRenderingSetting?
  @objc public var videoOptions: GFPSDK.GFPVideoOptions?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GFPAdNativeSimpleOptions : ObjectiveC.NSObject {
  @objc public var simpleAdRenderingSetting: GFPSDK.GFPNativeSimpleAdRenderingSetting?
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol GFPDictPresentable {
  @objc func dictionary() -> [Swift.String : Swift.String]?
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GFPSDKPhase : ObjectiveC.NSObject {
  @objc public class func sdkInitPhase(with aType: GFPSDK.GFPPhaseType) -> Swift.String
  @objc public class func skadnRegisterPhase(with aType: GFPSDK.GFPPhaseType) -> Swift.String
  @objc public class func waterfallPhase(with aType: GFPSDK.GFPPhaseType) -> Swift.String
  @objc public class func videoSchedulePhase(with aType: GFPSDK.GFPPhaseType) -> Swift.String
  @objc public class func neloPhase(with aType: GFPSDK.GFPPhaseType) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc(GFPAdInitProviderAdditionalInfo) @objcMembers public class GFPAdInitProviderAdditionalInfo : ObjectiveC.NSObject {
  @objc public var adUnitIds: [Swift.String]?
  @objc public var productTypes: [Swift.String]?
  @objc public var dictionary: [Swift.String : Any]
  @objc public init?(withDictionary dict: Swift.Dictionary<Swift.String, Any>?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GFPBundle : ObjectiveC.NSObject {
  @objc public static let sharedInstance: GFPSDK.GFPBundle
  @objc public static var appVersion: Swift.String {
    @objc get
  }
  @objc public static var appName: Swift.String {
    @objc get
  }
  @objc public static var identifier: Swift.String {
    @objc get
  }
  @objc public func skAdNetworkList() -> [Swift.String]
  @objc override dynamic public init()
  @objc public func setup()
  @objc public class func sdkResource(with aPath: Swift.String?, type aType: Swift.String?) -> Swift.String?
  @objc public class func isExistImage(bundle: Foundation.Bundle?, name: Swift.String) -> Swift.Bool
  @objc deinit
}
public typealias GFPS2SAdLandingHandler = (Swift.Bool) -> Swift.Void
@objc public protocol GFPS2SAdClickDelegate : ObjectiveC.NSObjectProtocol {
  @objc func openURLWith(_ urlString: Swift.String, landingHandler: (Swift.Bool) -> Swift.Void)
}
@objc public enum GFPVideoDisplayType : Swift.Int {
  case normal
  case casting
  case PIP
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class GFPVideoDisplayMode : ObjectiveC.NSObject {
  @objc public var mode: GFPSDK.GFPVideoDisplayType {
    get
  }
  @objc public var text: Swift.String? {
    get
  }
  @objc weak public var customTopView: UIKit.UIView? {
    get
  }
  @objc public var isCasting: Swift.Bool {
    @objc get
  }
  @objc public var isPIP: Swift.Bool {
    @objc get
  }
  @available(*, unavailable)
  @objc override dynamic public init()
  @objc public class func normal() -> GFPSDK.GFPVideoDisplayMode
  @objc public class func casting(with text: Swift.String?) -> GFPSDK.GFPVideoDisplayMode
  @objc public class func pip() -> GFPSDK.GFPVideoDisplayMode
  @objc public class func pip(with customTopView: UIKit.UIView?) -> GFPSDK.GFPVideoDisplayMode
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public enum GFPMediaType : Swift.Int {
  case image
  case video
  case richMedia
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class GFPMediaData : ObjectiveC.NSObject {
  @objc public static let unknwonAspectRatio: CoreFoundation.CGFloat
  @objc final public let mediaType: GFPSDK.GFPMediaType
  @objc final public let videoController: GFPSDK.GFPVideoController?
  @objc public var aspectRatio: CoreFoundation.CGFloat {
    @objc get
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc(createImageInfoWith:) public static func createImageInfo(image: UIKit.UIImage?) -> GFPSDK.GFPMediaData
  @objc(createVideoInfoWith:) public static func createVideoInfo(videoController: GFPSDK.GFPVideoController?) -> GFPSDK.GFPMediaData
  @objc(createRichMediaInfo) public static func createRichMediaInfo() -> GFPSDK.GFPMediaData
  @objc(createC2SInfoWith:) public static func createC2SInfo(c2sAspectRatio: CoreFoundation.CGFloat) -> GFPSDK.GFPMediaData
  @objc deinit
}
@propertyWrapper public class GFPThreadSafe<T> {
  final public let queue: Dispatch.DispatchQueue
  public init(wrappedValue: T, label: Swift.String)
  public var wrappedValue: T {
    get
    set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class GFPErrorPointerUtils {
  public static func isErrorRaised(errorPtr: Swift.AutoreleasingUnsafeMutablePointer<NaverAdsServices.GFPError?>?) -> Swift.Bool
  public static func raiseError(errorPtr: Swift.AutoreleasingUnsafeMutablePointer<NaverAdsServices.GFPError?>?, error: NaverAdsServices.GFPError)
  public static func raiseError(errorPtr: Swift.AutoreleasingUnsafeMutablePointer<NaverAdsServices.GFPError?>?, errorCode: Swift.Int, message: Swift.String? = nil)
  @objc deinit
}
extension GFPSDK.GFPVideoBackgroundActionType : Swift.Equatable {}
extension GFPSDK.GFPVideoBackgroundActionType : Swift.Hashable {}
extension GFPSDK.GFPVideoBackgroundActionType : Swift.RawRepresentable {}
extension GFPSDK.GFPOMContantsType : Swift.Equatable {}
extension GFPSDK.GFPOMContantsType : Swift.Hashable {}
extension GFPSDK.GFPOMContantsType : Swift.RawRepresentable {}
extension GFPSDK.GFPBannerProviderOption : Swift.Equatable {}
extension GFPSDK.GFPBannerProviderOption : Swift.Hashable {}
extension GFPSDK.GFPBannerProviderOption : Swift.RawRepresentable {}
extension GFPSDK.GFPVideoProviderOption : Swift.Equatable {}
extension GFPSDK.GFPVideoProviderOption : Swift.Hashable {}
extension GFPSDK.GFPVideoProviderOption : Swift.RawRepresentable {}
extension GFPSDK.GFPNativeProviderOption : Swift.Equatable {}
extension GFPSDK.GFPNativeProviderOption : Swift.Hashable {}
extension GFPSDK.GFPNativeProviderOption : Swift.RawRepresentable {}
extension GFPSDK.GFPCombinedProviderOption : Swift.Equatable {}
extension GFPSDK.GFPCombinedProviderOption : Swift.Hashable {}
extension GFPSDK.GFPCombinedProviderOption : Swift.RawRepresentable {}
extension GFPSDK.GFPRewardedAdProviderOption : Swift.Equatable {}
extension GFPSDK.GFPRewardedAdProviderOption : Swift.Hashable {}
extension GFPSDK.GFPRewardedAdProviderOption : Swift.RawRepresentable {}
extension GFPSDK.GFPInterstitialAdProviderOption : Swift.Equatable {}
extension GFPSDK.GFPInterstitialAdProviderOption : Swift.Hashable {}
extension GFPSDK.GFPInterstitialAdProviderOption : Swift.RawRepresentable {}
extension GFPSDK.GFPVideoDisplayType : Swift.Equatable {}
extension GFPSDK.GFPVideoDisplayType : Swift.Hashable {}
extension GFPSDK.GFPVideoDisplayType : Swift.RawRepresentable {}
extension GFPSDK.GFPMediaType : Swift.Equatable {}
extension GFPSDK.GFPMediaType : Swift.Hashable {}
extension GFPSDK.GFPMediaType : Swift.RawRepresentable {}
